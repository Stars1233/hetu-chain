// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: hetu/blockinflation/v1/query.proto

package types

import (
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryParamsRequest) Reset() {
	*x = QueryParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsRequest) ProtoMessage() {}

func (x *QueryParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsRequest.ProtoReflect.Descriptor instead.
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return file_hetu_blockinflation_v1_query_proto_rawDescGZIP(), []int{0}
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryParamsResponse) Reset() {
	*x = QueryParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsResponse) ProtoMessage() {}

func (x *QueryParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsResponse.ProtoReflect.Descriptor instead.
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return file_hetu_blockinflation_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryParamsResponse) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

// QueryPendingSubnetRewardsRequest is the request type for the Query/PendingSubnetRewards RPC method.
type QueryPendingSubnetRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryPendingSubnetRewardsRequest) Reset() {
	*x = QueryPendingSubnetRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPendingSubnetRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPendingSubnetRewardsRequest) ProtoMessage() {}

func (x *QueryPendingSubnetRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPendingSubnetRewardsRequest.ProtoReflect.Descriptor instead.
func (*QueryPendingSubnetRewardsRequest) Descriptor() ([]byte, []int) {
	return file_hetu_blockinflation_v1_query_proto_rawDescGZIP(), []int{2}
}

// QueryPendingSubnetRewardsResponse is the response type for the Query/PendingSubnetRewards RPC method.
type QueryPendingSubnetRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pending_subnet_rewards defines the pending subnet rewards.
	PendingSubnetRewards *types.Coin `protobuf:"bytes,1,opt,name=pending_subnet_rewards,json=pendingSubnetRewards,proto3" json:"pending_subnet_rewards,omitempty"`
}

func (x *QueryPendingSubnetRewardsResponse) Reset() {
	*x = QueryPendingSubnetRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPendingSubnetRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPendingSubnetRewardsResponse) ProtoMessage() {}

func (x *QueryPendingSubnetRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPendingSubnetRewardsResponse.ProtoReflect.Descriptor instead.
func (*QueryPendingSubnetRewardsResponse) Descriptor() ([]byte, []int) {
	return file_hetu_blockinflation_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPendingSubnetRewardsResponse) GetPendingSubnetRewards() *types.Coin {
	if x != nil {
		return x.PendingSubnetRewards
	}
	return nil
}

// Params defines the parameters for the blockinflation module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableBlockInflation bool   `protobuf:"varint,1,opt,name=enable_block_inflation,json=enableBlockInflation,proto3" json:"enable_block_inflation,omitempty"`
	MintDenom            string `protobuf:"bytes,2,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	TotalSupply          string `protobuf:"bytes,3,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	DefaultBlockEmission string `protobuf:"bytes,4,opt,name=default_block_emission,json=defaultBlockEmission,proto3" json:"default_block_emission,omitempty"`
	SubnetRewardBase     string `protobuf:"bytes,5,opt,name=subnet_reward_base,json=subnetRewardBase,proto3" json:"subnet_reward_base,omitempty"`
	SubnetRewardK        string `protobuf:"bytes,6,opt,name=subnet_reward_k,json=subnetRewardK,proto3" json:"subnet_reward_k,omitempty"`
	SubnetRewardMaxRatio string `protobuf:"bytes,7,opt,name=subnet_reward_max_ratio,json=subnetRewardMaxRatio,proto3" json:"subnet_reward_max_ratio,omitempty"`
	SubnetMovingAlpha    string `protobuf:"bytes,8,opt,name=subnet_moving_alpha,json=subnetMovingAlpha,proto3" json:"subnet_moving_alpha,omitempty"`
	SubnetOwnerCut       string `protobuf:"bytes,9,opt,name=subnet_owner_cut,json=subnetOwnerCut,proto3" json:"subnet_owner_cut,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_blockinflation_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_hetu_blockinflation_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *Params) GetEnableBlockInflation() bool {
	if x != nil {
		return x.EnableBlockInflation
	}
	return false
}

func (x *Params) GetMintDenom() string {
	if x != nil {
		return x.MintDenom
	}
	return ""
}

func (x *Params) GetTotalSupply() string {
	if x != nil {
		return x.TotalSupply
	}
	return ""
}

func (x *Params) GetDefaultBlockEmission() string {
	if x != nil {
		return x.DefaultBlockEmission
	}
	return ""
}

func (x *Params) GetSubnetRewardBase() string {
	if x != nil {
		return x.SubnetRewardBase
	}
	return ""
}

func (x *Params) GetSubnetRewardK() string {
	if x != nil {
		return x.SubnetRewardK
	}
	return ""
}

func (x *Params) GetSubnetRewardMaxRatio() string {
	if x != nil {
		return x.SubnetRewardMaxRatio
	}
	return ""
}

func (x *Params) GetSubnetMovingAlpha() string {
	if x != nil {
		return x.SubnetMovingAlpha
	}
	return ""
}

func (x *Params) GetSubnetOwnerCut() string {
	if x != nil {
		return x.SubnetOwnerCut
	}
	return ""
}

var File_hetu_blockinflation_v1_query_proto protoreflect.FileDescriptor

var file_hetu_blockinflation_v1_query_proto_rawDesc = []byte{
	0x0a, 0x22, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x14, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x65, 0x74, 0x75, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x7a, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x9a, 0x05, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a,
	0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4b, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x53,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0x52, 0x11, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43,
	0x75, 0x74, 0x3a, 0x04, 0x98, 0xa0, 0x1f, 0x00, 0x32, 0xd9, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x2e,
	0x68, 0x65, 0x74, 0x75, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x65, 0x74, 0x75,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xc3,
	0x01, 0x0a, 0x14, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x68, 0x65, 0x74, 0x75, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hetu_blockinflation_v1_query_proto_rawDescOnce sync.Once
	file_hetu_blockinflation_v1_query_proto_rawDescData = file_hetu_blockinflation_v1_query_proto_rawDesc
)

func file_hetu_blockinflation_v1_query_proto_rawDescGZIP() []byte {
	file_hetu_blockinflation_v1_query_proto_rawDescOnce.Do(func() {
		file_hetu_blockinflation_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_hetu_blockinflation_v1_query_proto_rawDescData)
	})
	return file_hetu_blockinflation_v1_query_proto_rawDescData
}

var file_hetu_blockinflation_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_hetu_blockinflation_v1_query_proto_goTypes = []interface{}{
	(*QueryParamsRequest)(nil),                // 0: hetu.blockinflation.v1.QueryParamsRequest
	(*QueryParamsResponse)(nil),               // 1: hetu.blockinflation.v1.QueryParamsResponse
	(*QueryPendingSubnetRewardsRequest)(nil),  // 2: hetu.blockinflation.v1.QueryPendingSubnetRewardsRequest
	(*QueryPendingSubnetRewardsResponse)(nil), // 3: hetu.blockinflation.v1.QueryPendingSubnetRewardsResponse
	(*Params)(nil),                            // 4: hetu.blockinflation.v1.Params
	(*types.Coin)(nil),                        // 5: cosmos.base.v1beta1.Coin
}
var file_hetu_blockinflation_v1_query_proto_depIdxs = []int32{
	4, // 0: hetu.blockinflation.v1.QueryParamsResponse.params:type_name -> hetu.blockinflation.v1.Params
	5, // 1: hetu.blockinflation.v1.QueryPendingSubnetRewardsResponse.pending_subnet_rewards:type_name -> cosmos.base.v1beta1.Coin
	0, // 2: hetu.blockinflation.v1.Query.Params:input_type -> hetu.blockinflation.v1.QueryParamsRequest
	2, // 3: hetu.blockinflation.v1.Query.PendingSubnetRewards:input_type -> hetu.blockinflation.v1.QueryPendingSubnetRewardsRequest
	1, // 4: hetu.blockinflation.v1.Query.Params:output_type -> hetu.blockinflation.v1.QueryParamsResponse
	3, // 5: hetu.blockinflation.v1.Query.PendingSubnetRewards:output_type -> hetu.blockinflation.v1.QueryPendingSubnetRewardsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_hetu_blockinflation_v1_query_proto_init() }
func file_hetu_blockinflation_v1_query_proto_init() {
	if File_hetu_blockinflation_v1_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hetu_blockinflation_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_blockinflation_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_blockinflation_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPendingSubnetRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_blockinflation_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPendingSubnetRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_blockinflation_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hetu_blockinflation_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hetu_blockinflation_v1_query_proto_goTypes,
		DependencyIndexes: file_hetu_blockinflation_v1_query_proto_depIdxs,
		MessageInfos:      file_hetu_blockinflation_v1_query_proto_msgTypes,
	}.Build()
	File_hetu_blockinflation_v1_query_proto = out.File
	file_hetu_blockinflation_v1_query_proto_rawDesc = nil
	file_hetu_blockinflation_v1_query_proto_goTypes = nil
	file_hetu_blockinflation_v1_query_proto_depIdxs = nil
}
