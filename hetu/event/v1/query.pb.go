// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: hetu/event/v1/query.proto

package types

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuerySubnetsRequest is the request type for the Query/Subnets RPC method
type QuerySubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuerySubnetsRequest) Reset() {
	*x = QuerySubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetsRequest) ProtoMessage() {}

func (x *QuerySubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetsRequest.ProtoReflect.Descriptor instead.
func (*QuerySubnetsRequest) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{0}
}

// QuerySubnetsResponse is the response type for the Query/Subnets RPC method
type QuerySubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets []*SubnetInfo `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *QuerySubnetsResponse) Reset() {
	*x = QuerySubnetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetsResponse) ProtoMessage() {}

func (x *QuerySubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetsResponse.ProtoReflect.Descriptor instead.
func (*QuerySubnetsResponse) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QuerySubnetsResponse) GetSubnets() []*SubnetInfo {
	if x != nil {
		return x.Subnets
	}
	return nil
}

// QuerySubnetRequest is the request type for the Query/Subnet RPC method
type QuerySubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
}

func (x *QuerySubnetRequest) Reset() {
	*x = QuerySubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetRequest) ProtoMessage() {}

func (x *QuerySubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetRequest.ProtoReflect.Descriptor instead.
func (*QuerySubnetRequest) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *QuerySubnetRequest) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

// QuerySubnetResponse is the response type for the Query/Subnet RPC method
type QuerySubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *SubnetInfo `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *QuerySubnetResponse) Reset() {
	*x = QuerySubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetResponse) ProtoMessage() {}

func (x *QuerySubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetResponse.ProtoReflect.Descriptor instead.
func (*QuerySubnetResponse) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QuerySubnetResponse) GetSubnet() *SubnetInfo {
	if x != nil {
		return x.Subnet
	}
	return nil
}

// QuerySubnetNeuronsRequest is the request type for the Query/SubnetNeurons RPC method
type QuerySubnetNeuronsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
}

func (x *QuerySubnetNeuronsRequest) Reset() {
	*x = QuerySubnetNeuronsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetNeuronsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetNeuronsRequest) ProtoMessage() {}

func (x *QuerySubnetNeuronsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetNeuronsRequest.ProtoReflect.Descriptor instead.
func (*QuerySubnetNeuronsRequest) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QuerySubnetNeuronsRequest) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

// QuerySubnetNeuronsResponse is the response type for the Query/SubnetNeurons RPC method
type QuerySubnetNeuronsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neurons []*NeuronInfo `protobuf:"bytes,1,rep,name=neurons,proto3" json:"neurons,omitempty"`
}

func (x *QuerySubnetNeuronsResponse) Reset() {
	*x = QuerySubnetNeuronsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetNeuronsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetNeuronsResponse) ProtoMessage() {}

func (x *QuerySubnetNeuronsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetNeuronsResponse.ProtoReflect.Descriptor instead.
func (*QuerySubnetNeuronsResponse) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QuerySubnetNeuronsResponse) GetNeurons() []*NeuronInfo {
	if x != nil {
		return x.Neurons
	}
	return nil
}

// QuerySubnetPoolRequest is the request type for the Query/SubnetPool RPC method
type QuerySubnetPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
}

func (x *QuerySubnetPoolRequest) Reset() {
	*x = QuerySubnetPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetPoolRequest) ProtoMessage() {}

func (x *QuerySubnetPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetPoolRequest.ProtoReflect.Descriptor instead.
func (*QuerySubnetPoolRequest) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{6}
}

func (x *QuerySubnetPoolRequest) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

// QuerySubnetPoolResponse is the response type for the Query/SubnetPool RPC method
type QuerySubnetPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid       uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
	AmmPool      string `protobuf:"bytes,2,opt,name=amm_pool,json=ammPool,proto3" json:"amm_pool,omitempty"`
	LockedAmount string `protobuf:"bytes,3,opt,name=locked_amount,json=lockedAmount,proto3" json:"locked_amount,omitempty"`
	BurnedAmount string `protobuf:"bytes,4,opt,name=burned_amount,json=burnedAmount,proto3" json:"burned_amount,omitempty"`
}

func (x *QuerySubnetPoolResponse) Reset() {
	*x = QuerySubnetPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubnetPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubnetPoolResponse) ProtoMessage() {}

func (x *QuerySubnetPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubnetPoolResponse.ProtoReflect.Descriptor instead.
func (*QuerySubnetPoolResponse) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{7}
}

func (x *QuerySubnetPoolResponse) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

func (x *QuerySubnetPoolResponse) GetAmmPool() string {
	if x != nil {
		return x.AmmPool
	}
	return ""
}

func (x *QuerySubnetPoolResponse) GetLockedAmount() string {
	if x != nil {
		return x.LockedAmount
	}
	return ""
}

func (x *QuerySubnetPoolResponse) GetBurnedAmount() string {
	if x != nil {
		return x.BurnedAmount
	}
	return ""
}

// QueryValidatorWeightsRequest is the request type for the Query/ValidatorWeights RPC method
type QueryValidatorWeightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid    uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *QueryValidatorWeightsRequest) Reset() {
	*x = QueryValidatorWeightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorWeightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorWeightsRequest) ProtoMessage() {}

func (x *QueryValidatorWeightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorWeightsRequest.ProtoReflect.Descriptor instead.
func (*QueryValidatorWeightsRequest) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryValidatorWeightsRequest) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

func (x *QueryValidatorWeightsRequest) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

// QueryValidatorWeightsResponse is the response type for the Query/ValidatorWeights RPC method
type QueryValidatorWeightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid    uint32   `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
	Validator string   `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Weights   []string `protobuf:"bytes,3,rep,name=weights,proto3" json:"weights,omitempty"`
}

func (x *QueryValidatorWeightsResponse) Reset() {
	*x = QueryValidatorWeightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorWeightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorWeightsResponse) ProtoMessage() {}

func (x *QueryValidatorWeightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorWeightsResponse.ProtoReflect.Descriptor instead.
func (*QueryValidatorWeightsResponse) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryValidatorWeightsResponse) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

func (x *QueryValidatorWeightsResponse) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *QueryValidatorWeightsResponse) GetWeights() []string {
	if x != nil {
		return x.Weights
	}
	return nil
}

// SubnetInfo represents subnet information
type SubnetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netuid         uint32 `protobuf:"varint,1,opt,name=netuid,proto3" json:"netuid,omitempty"`
	Owner          string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	AlphaToken     string `protobuf:"bytes,3,opt,name=alpha_token,json=alphaToken,proto3" json:"alpha_token,omitempty"`
	AmmPool        string `protobuf:"bytes,4,opt,name=amm_pool,json=ammPool,proto3" json:"amm_pool,omitempty"`
	LockedAmount   string `protobuf:"bytes,5,opt,name=locked_amount,json=lockedAmount,proto3" json:"locked_amount,omitempty"`
	PoolInitialTao string `protobuf:"bytes,6,opt,name=pool_initial_tao,json=poolInitialTao,proto3" json:"pool_initial_tao,omitempty"`
	BurnedAmount   string `protobuf:"bytes,7,opt,name=burned_amount,json=burnedAmount,proto3" json:"burned_amount,omitempty"`
	CreatedAt      uint64 `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsActive       bool   `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Name           string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	ActivatedAt    uint64 `protobuf:"varint,12,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	ActivatedBlock uint64 `protobuf:"varint,13,opt,name=activated_block,json=activatedBlock,proto3" json:"activated_block,omitempty"`
}

func (x *SubnetInfo) Reset() {
	*x = SubnetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetInfo) ProtoMessage() {}

func (x *SubnetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetInfo.ProtoReflect.Descriptor instead.
func (*SubnetInfo) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{10}
}

func (x *SubnetInfo) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

func (x *SubnetInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SubnetInfo) GetAlphaToken() string {
	if x != nil {
		return x.AlphaToken
	}
	return ""
}

func (x *SubnetInfo) GetAmmPool() string {
	if x != nil {
		return x.AmmPool
	}
	return ""
}

func (x *SubnetInfo) GetLockedAmount() string {
	if x != nil {
		return x.LockedAmount
	}
	return ""
}

func (x *SubnetInfo) GetPoolInitialTao() string {
	if x != nil {
		return x.PoolInitialTao
	}
	return ""
}

func (x *SubnetInfo) GetBurnedAmount() string {
	if x != nil {
		return x.BurnedAmount
	}
	return ""
}

func (x *SubnetInfo) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SubnetInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SubnetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubnetInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubnetInfo) GetActivatedAt() uint64 {
	if x != nil {
		return x.ActivatedAt
	}
	return 0
}

func (x *SubnetInfo) GetActivatedBlock() uint64 {
	if x != nil {
		return x.ActivatedBlock
	}
	return 0
}

// NeuronInfo represents neuron information
type NeuronInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account                string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Netuid                 uint32 `protobuf:"varint,2,opt,name=netuid,proto3" json:"netuid,omitempty"`
	IsActive               bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsValidator            bool   `protobuf:"varint,4,opt,name=is_validator,json=isValidator,proto3" json:"is_validator,omitempty"`
	RequestedValidatorRole bool   `protobuf:"varint,5,opt,name=requested_validator_role,json=requestedValidatorRole,proto3" json:"requested_validator_role,omitempty"`
	Stake                  string `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake,omitempty"`
	RegistrationBlock      uint64 `protobuf:"varint,7,opt,name=registration_block,json=registrationBlock,proto3" json:"registration_block,omitempty"`
	LastUpdate             uint64 `protobuf:"varint,8,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	AxonEndpoint           string `protobuf:"bytes,9,opt,name=axon_endpoint,json=axonEndpoint,proto3" json:"axon_endpoint,omitempty"`
	AxonPort               uint32 `protobuf:"varint,10,opt,name=axon_port,json=axonPort,proto3" json:"axon_port,omitempty"`
	PrometheusEndpoint     string `protobuf:"bytes,11,opt,name=prometheus_endpoint,json=prometheusEndpoint,proto3" json:"prometheus_endpoint,omitempty"`
	PrometheusPort         uint32 `protobuf:"varint,12,opt,name=prometheus_port,json=prometheusPort,proto3" json:"prometheus_port,omitempty"`
}

func (x *NeuronInfo) Reset() {
	*x = NeuronInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hetu_event_v1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeuronInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeuronInfo) ProtoMessage() {}

func (x *NeuronInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hetu_event_v1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeuronInfo.ProtoReflect.Descriptor instead.
func (*NeuronInfo) Descriptor() ([]byte, []int) {
	return file_hetu_event_v1_query_proto_rawDescGZIP(), []int{11}
}

func (x *NeuronInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *NeuronInfo) GetNetuid() uint32 {
	if x != nil {
		return x.Netuid
	}
	return 0
}

func (x *NeuronInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *NeuronInfo) GetIsValidator() bool {
	if x != nil {
		return x.IsValidator
	}
	return false
}

func (x *NeuronInfo) GetRequestedValidatorRole() bool {
	if x != nil {
		return x.RequestedValidatorRole
	}
	return false
}

func (x *NeuronInfo) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *NeuronInfo) GetRegistrationBlock() uint64 {
	if x != nil {
		return x.RegistrationBlock
	}
	return 0
}

func (x *NeuronInfo) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *NeuronInfo) GetAxonEndpoint() string {
	if x != nil {
		return x.AxonEndpoint
	}
	return ""
}

func (x *NeuronInfo) GetAxonPort() uint32 {
	if x != nil {
		return x.AxonPort
	}
	return 0
}

func (x *NeuronInfo) GetPrometheusEndpoint() string {
	if x != nil {
		return x.PrometheusEndpoint
	}
	return ""
}

func (x *NeuronInfo) GetPrometheusPort() uint32 {
	if x != nil {
		return x.PrometheusPort
	}
	return 0
}

var File_hetu_event_v1_query_proto protoreflect.FileDescriptor

var file_hetu_event_v1_query_proto_rawDesc = []byte{
	0x0a, 0x19, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x68, 0x65, 0x74,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15,
	0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6e, 0x65, 0x75,
	0x72, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x74,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x75, 0x72, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x75,
	0x72, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d,
	0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x54, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0xba, 0x03, 0x0a, 0x0a, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65,
	0x74, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x78, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x78, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x78, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x78, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x32, 0xcc,
	0x05, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x72, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x06,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x74, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x6e, 0x65,
	0x74, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x65, 0x75,
	0x72, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x6e, 0x65, 0x74,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x01, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x25, 0x2e, 0x68, 0x65,
	0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x68,
	0x65, 0x74, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x65, 0x74, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12,
	0x3c, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x7b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x7d, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x2f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x74, 0x75,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x76, 0x31,
	0x2f, 0x78, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hetu_event_v1_query_proto_rawDescOnce sync.Once
	file_hetu_event_v1_query_proto_rawDescData = file_hetu_event_v1_query_proto_rawDesc
)

func file_hetu_event_v1_query_proto_rawDescGZIP() []byte {
	file_hetu_event_v1_query_proto_rawDescOnce.Do(func() {
		file_hetu_event_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_hetu_event_v1_query_proto_rawDescData)
	})
	return file_hetu_event_v1_query_proto_rawDescData
}

var file_hetu_event_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_hetu_event_v1_query_proto_goTypes = []interface{}{
	(*QuerySubnetsRequest)(nil),           // 0: hetu.event.v1.QuerySubnetsRequest
	(*QuerySubnetsResponse)(nil),          // 1: hetu.event.v1.QuerySubnetsResponse
	(*QuerySubnetRequest)(nil),            // 2: hetu.event.v1.QuerySubnetRequest
	(*QuerySubnetResponse)(nil),           // 3: hetu.event.v1.QuerySubnetResponse
	(*QuerySubnetNeuronsRequest)(nil),     // 4: hetu.event.v1.QuerySubnetNeuronsRequest
	(*QuerySubnetNeuronsResponse)(nil),    // 5: hetu.event.v1.QuerySubnetNeuronsResponse
	(*QuerySubnetPoolRequest)(nil),        // 6: hetu.event.v1.QuerySubnetPoolRequest
	(*QuerySubnetPoolResponse)(nil),       // 7: hetu.event.v1.QuerySubnetPoolResponse
	(*QueryValidatorWeightsRequest)(nil),  // 8: hetu.event.v1.QueryValidatorWeightsRequest
	(*QueryValidatorWeightsResponse)(nil), // 9: hetu.event.v1.QueryValidatorWeightsResponse
	(*SubnetInfo)(nil),                    // 10: hetu.event.v1.SubnetInfo
	(*NeuronInfo)(nil),                    // 11: hetu.event.v1.NeuronInfo
}
var file_hetu_event_v1_query_proto_depIdxs = []int32{
	10, // 0: hetu.event.v1.QuerySubnetsResponse.subnets:type_name -> hetu.event.v1.SubnetInfo
	10, // 1: hetu.event.v1.QuerySubnetResponse.subnet:type_name -> hetu.event.v1.SubnetInfo
	11, // 2: hetu.event.v1.QuerySubnetNeuronsResponse.neurons:type_name -> hetu.event.v1.NeuronInfo
	0,  // 3: hetu.event.v1.Query.Subnets:input_type -> hetu.event.v1.QuerySubnetsRequest
	2,  // 4: hetu.event.v1.Query.Subnet:input_type -> hetu.event.v1.QuerySubnetRequest
	4,  // 5: hetu.event.v1.Query.SubnetNeurons:input_type -> hetu.event.v1.QuerySubnetNeuronsRequest
	6,  // 6: hetu.event.v1.Query.SubnetPool:input_type -> hetu.event.v1.QuerySubnetPoolRequest
	8,  // 7: hetu.event.v1.Query.ValidatorWeights:input_type -> hetu.event.v1.QueryValidatorWeightsRequest
	1,  // 8: hetu.event.v1.Query.Subnets:output_type -> hetu.event.v1.QuerySubnetsResponse
	3,  // 9: hetu.event.v1.Query.Subnet:output_type -> hetu.event.v1.QuerySubnetResponse
	5,  // 10: hetu.event.v1.Query.SubnetNeurons:output_type -> hetu.event.v1.QuerySubnetNeuronsResponse
	7,  // 11: hetu.event.v1.Query.SubnetPool:output_type -> hetu.event.v1.QuerySubnetPoolResponse
	9,  // 12: hetu.event.v1.Query.ValidatorWeights:output_type -> hetu.event.v1.QueryValidatorWeightsResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_hetu_event_v1_query_proto_init() }
func file_hetu_event_v1_query_proto_init() {
	if File_hetu_event_v1_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hetu_event_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetNeuronsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetNeuronsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubnetPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorWeightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorWeightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hetu_event_v1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeuronInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hetu_event_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hetu_event_v1_query_proto_goTypes,
		DependencyIndexes: file_hetu_event_v1_query_proto_depIdxs,
		MessageInfos:      file_hetu_event_v1_query_proto_msgTypes,
	}.Build()
	File_hetu_event_v1_query_proto = out.File
	file_hetu_event_v1_query_proto_rawDesc = nil
	file_hetu_event_v1_query_proto_goTypes = nil
	file_hetu_event_v1_query_proto_depIdxs = nil
}
