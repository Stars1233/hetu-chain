// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hetu/event/v1/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Subnets_FullMethodName          = "/hetu.event.v1.Query/Subnets"
	Query_Subnet_FullMethodName           = "/hetu.event.v1.Query/Subnet"
	Query_SubnetNeurons_FullMethodName    = "/hetu.event.v1.Query/SubnetNeurons"
	Query_SubnetPool_FullMethodName       = "/hetu.event.v1.Query/SubnetPool"
	Query_ValidatorWeights_FullMethodName = "/hetu.event.v1.Query/ValidatorWeights"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Subnets returns all subnets with pagination
	Subnets(ctx context.Context, in *QuerySubnetsRequest, opts ...grpc.CallOption) (*QuerySubnetsResponse, error)
	// Subnet returns subnet info by ID
	Subnet(ctx context.Context, in *QuerySubnetRequest, opts ...grpc.CallOption) (*QuerySubnetResponse, error)
	// SubnetNeurons returns all neurons in a subnet
	SubnetNeurons(ctx context.Context, in *QuerySubnetNeuronsRequest, opts ...grpc.CallOption) (*QuerySubnetNeuronsResponse, error)
	// SubnetPool returns pool info for a subnet
	SubnetPool(ctx context.Context, in *QuerySubnetPoolRequest, opts ...grpc.CallOption) (*QuerySubnetPoolResponse, error)
	// ValidatorWeights returns weights for a validator in a subnet
	ValidatorWeights(ctx context.Context, in *QueryValidatorWeightsRequest, opts ...grpc.CallOption) (*QueryValidatorWeightsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Subnets(ctx context.Context, in *QuerySubnetsRequest, opts ...grpc.CallOption) (*QuerySubnetsResponse, error) {
	out := new(QuerySubnetsResponse)
	err := c.cc.Invoke(ctx, Query_Subnets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subnet(ctx context.Context, in *QuerySubnetRequest, opts ...grpc.CallOption) (*QuerySubnetResponse, error) {
	out := new(QuerySubnetResponse)
	err := c.cc.Invoke(ctx, Query_Subnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubnetNeurons(ctx context.Context, in *QuerySubnetNeuronsRequest, opts ...grpc.CallOption) (*QuerySubnetNeuronsResponse, error) {
	out := new(QuerySubnetNeuronsResponse)
	err := c.cc.Invoke(ctx, Query_SubnetNeurons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubnetPool(ctx context.Context, in *QuerySubnetPoolRequest, opts ...grpc.CallOption) (*QuerySubnetPoolResponse, error) {
	out := new(QuerySubnetPoolResponse)
	err := c.cc.Invoke(ctx, Query_SubnetPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorWeights(ctx context.Context, in *QueryValidatorWeightsRequest, opts ...grpc.CallOption) (*QueryValidatorWeightsResponse, error) {
	out := new(QueryValidatorWeightsResponse)
	err := c.cc.Invoke(ctx, Query_ValidatorWeights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Subnets returns all subnets with pagination
	Subnets(context.Context, *QuerySubnetsRequest) (*QuerySubnetsResponse, error)
	// Subnet returns subnet info by ID
	Subnet(context.Context, *QuerySubnetRequest) (*QuerySubnetResponse, error)
	// SubnetNeurons returns all neurons in a subnet
	SubnetNeurons(context.Context, *QuerySubnetNeuronsRequest) (*QuerySubnetNeuronsResponse, error)
	// SubnetPool returns pool info for a subnet
	SubnetPool(context.Context, *QuerySubnetPoolRequest) (*QuerySubnetPoolResponse, error)
	// ValidatorWeights returns weights for a validator in a subnet
	ValidatorWeights(context.Context, *QueryValidatorWeightsRequest) (*QueryValidatorWeightsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Subnets(context.Context, *QuerySubnetsRequest) (*QuerySubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subnets not implemented")
}
func (UnimplementedQueryServer) Subnet(context.Context, *QuerySubnetRequest) (*QuerySubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subnet not implemented")
}
func (UnimplementedQueryServer) SubnetNeurons(context.Context, *QuerySubnetNeuronsRequest) (*QuerySubnetNeuronsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubnetNeurons not implemented")
}
func (UnimplementedQueryServer) SubnetPool(context.Context, *QuerySubnetPoolRequest) (*QuerySubnetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubnetPool not implemented")
}
func (UnimplementedQueryServer) ValidatorWeights(context.Context, *QueryValidatorWeightsRequest) (*QueryValidatorWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorWeights not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Subnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Subnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subnets(ctx, req.(*QuerySubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Subnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subnet(ctx, req.(*QuerySubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubnetNeurons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubnetNeuronsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubnetNeurons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubnetNeurons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubnetNeurons(ctx, req.(*QuerySubnetNeuronsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubnetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubnetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubnetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubnetPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubnetPool(ctx, req.(*QuerySubnetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorWeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValidatorWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorWeights(ctx, req.(*QueryValidatorWeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hetu.event.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subnets",
			Handler:    _Query_Subnets_Handler,
		},
		{
			MethodName: "Subnet",
			Handler:    _Query_Subnet_Handler,
		},
		{
			MethodName: "SubnetNeurons",
			Handler:    _Query_SubnetNeurons_Handler,
		},
		{
			MethodName: "SubnetPool",
			Handler:    _Query_SubnetPool_Handler,
		},
		{
			MethodName: "ValidatorWeights",
			Handler:    _Query_ValidatorWeights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hetu/event/v1/query.proto",
}
