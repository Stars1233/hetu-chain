// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: evmos/vesting/v1/vesting.proto

package types

import (
	types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClawbackVestingAccount implements the VestingAccount interface. It provides
// an account that can hold contributions subject to "lockup" (like a
// PeriodicVestingAccount), or vesting which is subject to clawback
// of unvested tokens, or a combination (tokens vest, but are still locked).
type ClawbackVestingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_vesting_account implements the VestingAccount interface. It contains
	// all the necessary fields needed for any vesting account implementation
	BaseVestingAccount *types.BaseVestingAccount `protobuf:"bytes,1,opt,name=base_vesting_account,json=baseVestingAccount,proto3" json:"base_vesting_account,omitempty"`
	// funder_address specifies the account which can perform clawback
	FunderAddress string `protobuf:"bytes,2,opt,name=funder_address,json=funderAddress,proto3" json:"funder_address,omitempty"`
	// start_time defines the time at which the vesting period begins
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// lockup_periods defines the unlocking schedule relative to the start_time
	LockupPeriods []*types.Period `protobuf:"bytes,4,rep,name=lockup_periods,json=lockupPeriods,proto3" json:"lockup_periods,omitempty"`
	// vesting_periods defines the vesting schedule relative to the start_time
	VestingPeriods []*types.Period `protobuf:"bytes,5,rep,name=vesting_periods,json=vestingPeriods,proto3" json:"vesting_periods,omitempty"`
}

func (x *ClawbackVestingAccount) Reset() {
	*x = ClawbackVestingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_vesting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClawbackVestingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawbackVestingAccount) ProtoMessage() {}

func (x *ClawbackVestingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_vesting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawbackVestingAccount.ProtoReflect.Descriptor instead.
func (*ClawbackVestingAccount) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_vesting_proto_rawDescGZIP(), []int{0}
}

func (x *ClawbackVestingAccount) GetBaseVestingAccount() *types.BaseVestingAccount {
	if x != nil {
		return x.BaseVestingAccount
	}
	return nil
}

func (x *ClawbackVestingAccount) GetFunderAddress() string {
	if x != nil {
		return x.FunderAddress
	}
	return ""
}

func (x *ClawbackVestingAccount) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ClawbackVestingAccount) GetLockupPeriods() []*types.Period {
	if x != nil {
		return x.LockupPeriods
	}
	return nil
}

func (x *ClawbackVestingAccount) GetVestingPeriods() []*types.Period {
	if x != nil {
		return x.VestingPeriods
	}
	return nil
}

var File_evmos_vesting_v1_vesting_proto protoreflect.FileDescriptor

var file_evmos_vesting_v1_vesting_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x1a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8a, 0x04, 0x0a, 0x16, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x41, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42,
	0x41, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x76, 0x31, 0x2f,
	0x78, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evmos_vesting_v1_vesting_proto_rawDescOnce sync.Once
	file_evmos_vesting_v1_vesting_proto_rawDescData = file_evmos_vesting_v1_vesting_proto_rawDesc
)

func file_evmos_vesting_v1_vesting_proto_rawDescGZIP() []byte {
	file_evmos_vesting_v1_vesting_proto_rawDescOnce.Do(func() {
		file_evmos_vesting_v1_vesting_proto_rawDescData = protoimpl.X.CompressGZIP(file_evmos_vesting_v1_vesting_proto_rawDescData)
	})
	return file_evmos_vesting_v1_vesting_proto_rawDescData
}

var file_evmos_vesting_v1_vesting_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_evmos_vesting_v1_vesting_proto_goTypes = []interface{}{
	(*ClawbackVestingAccount)(nil),   // 0: evmos.vesting.v1.ClawbackVestingAccount
	(*types.BaseVestingAccount)(nil), // 1: cosmos.vesting.v1beta1.BaseVestingAccount
	(*timestamppb.Timestamp)(nil),    // 2: google.protobuf.Timestamp
	(*types.Period)(nil),             // 3: cosmos.vesting.v1beta1.Period
}
var file_evmos_vesting_v1_vesting_proto_depIdxs = []int32{
	1, // 0: evmos.vesting.v1.ClawbackVestingAccount.base_vesting_account:type_name -> cosmos.vesting.v1beta1.BaseVestingAccount
	2, // 1: evmos.vesting.v1.ClawbackVestingAccount.start_time:type_name -> google.protobuf.Timestamp
	3, // 2: evmos.vesting.v1.ClawbackVestingAccount.lockup_periods:type_name -> cosmos.vesting.v1beta1.Period
	3, // 3: evmos.vesting.v1.ClawbackVestingAccount.vesting_periods:type_name -> cosmos.vesting.v1beta1.Period
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_evmos_vesting_v1_vesting_proto_init() }
func file_evmos_vesting_v1_vesting_proto_init() {
	if File_evmos_vesting_v1_vesting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evmos_vesting_v1_vesting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClawbackVestingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evmos_vesting_v1_vesting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evmos_vesting_v1_vesting_proto_goTypes,
		DependencyIndexes: file_evmos_vesting_v1_vesting_proto_depIdxs,
		MessageInfos:      file_evmos_vesting_v1_vesting_proto_msgTypes,
	}.Build()
	File_evmos_vesting_v1_vesting_proto = out.File
	file_evmos_vesting_v1_vesting_proto_rawDesc = nil
	file_evmos_vesting_v1_vesting_proto_goTypes = nil
	file_evmos_vesting_v1_vesting_proto_depIdxs = nil
}
