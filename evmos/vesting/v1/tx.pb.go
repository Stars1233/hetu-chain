// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: evmos/vesting/v1/tx.proto

package types

import (
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	types "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgCreateClawbackVestingAccount defines a message that enables creating a
// ClawbackVestingAccount.
type MsgCreateClawbackVestingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from_address specifies the account to provide the funds and sign the
	// clawback request
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// to_address specifies the account to receive the funds
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// start_time defines the time at which the vesting period begins
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// lockup_periods defines the unlocking schedule relative to the start_time
	LockupPeriods []*types.Period `protobuf:"bytes,4,rep,name=lockup_periods,json=lockupPeriods,proto3" json:"lockup_periods,omitempty"`
	// vesting_periods defines the vesting schedule relative to the start_time
	VestingPeriods []*types.Period `protobuf:"bytes,5,rep,name=vesting_periods,json=vestingPeriods,proto3" json:"vesting_periods,omitempty"`
	// merge specifies a the creation mechanism for existing
	// ClawbackVestingAccounts. If true, merge this new grant into an existing
	// ClawbackVestingAccount, or create it if it does not exist. If false,
	// creates a new account. New grants to an existing account must be from the
	// same from_address.
	Merge bool `protobuf:"varint,6,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (x *MsgCreateClawbackVestingAccount) Reset() {
	*x = MsgCreateClawbackVestingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateClawbackVestingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateClawbackVestingAccount) ProtoMessage() {}

func (x *MsgCreateClawbackVestingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCreateClawbackVestingAccount.ProtoReflect.Descriptor instead.
func (*MsgCreateClawbackVestingAccount) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgCreateClawbackVestingAccount) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *MsgCreateClawbackVestingAccount) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *MsgCreateClawbackVestingAccount) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MsgCreateClawbackVestingAccount) GetLockupPeriods() []*types.Period {
	if x != nil {
		return x.LockupPeriods
	}
	return nil
}

func (x *MsgCreateClawbackVestingAccount) GetVestingPeriods() []*types.Period {
	if x != nil {
		return x.VestingPeriods
	}
	return nil
}

func (x *MsgCreateClawbackVestingAccount) GetMerge() bool {
	if x != nil {
		return x.Merge
	}
	return false
}

// MsgCreateClawbackVestingAccountResponse defines the
// MsgCreateClawbackVestingAccount response type.
type MsgCreateClawbackVestingAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgCreateClawbackVestingAccountResponse) Reset() {
	*x = MsgCreateClawbackVestingAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreateClawbackVestingAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreateClawbackVestingAccountResponse) ProtoMessage() {}

func (x *MsgCreateClawbackVestingAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCreateClawbackVestingAccountResponse.ProtoReflect.Descriptor instead.
func (*MsgCreateClawbackVestingAccountResponse) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{1}
}

// MsgClawback defines a message that removes unvested tokens from a
// ClawbackVestingAccount.
type MsgClawback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// funder_address is the address which funded the account
	FunderAddress string `protobuf:"bytes,1,opt,name=funder_address,json=funderAddress,proto3" json:"funder_address,omitempty"`
	// account_address is the address of the ClawbackVestingAccount to claw back
	// from.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// dest_address specifies where the clawed-back tokens should be transferred
	// to. If empty, the tokens will be transferred back to the original funder of
	// the account.
	DestAddress string `protobuf:"bytes,3,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
}

func (x *MsgClawback) Reset() {
	*x = MsgClawback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgClawback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgClawback) ProtoMessage() {}

func (x *MsgClawback) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgClawback.ProtoReflect.Descriptor instead.
func (*MsgClawback) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgClawback) GetFunderAddress() string {
	if x != nil {
		return x.FunderAddress
	}
	return ""
}

func (x *MsgClawback) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *MsgClawback) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

// MsgClawbackResponse defines the MsgClawback response type.
type MsgClawbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgClawbackResponse) Reset() {
	*x = MsgClawbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgClawbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgClawbackResponse) ProtoMessage() {}

func (x *MsgClawbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgClawbackResponse.ProtoReflect.Descriptor instead.
func (*MsgClawbackResponse) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{3}
}

// MsgUpdateVestingFunder defines a message that updates the funder account of a
// ClawbackVestingAccount.
type MsgUpdateVestingFunder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// funder_address is the current funder address of the ClawbackVestingAccount
	FunderAddress string `protobuf:"bytes,1,opt,name=funder_address,json=funderAddress,proto3" json:"funder_address,omitempty"`
	// new_funder_address is the new address to replace the existing funder_address
	NewFunderAddress string `protobuf:"bytes,2,opt,name=new_funder_address,json=newFunderAddress,proto3" json:"new_funder_address,omitempty"`
	// vesting_address is the address of the ClawbackVestingAccount being updated
	VestingAddress string `protobuf:"bytes,3,opt,name=vesting_address,json=vestingAddress,proto3" json:"vesting_address,omitempty"`
}

func (x *MsgUpdateVestingFunder) Reset() {
	*x = MsgUpdateVestingFunder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateVestingFunder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateVestingFunder) ProtoMessage() {}

func (x *MsgUpdateVestingFunder) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUpdateVestingFunder.ProtoReflect.Descriptor instead.
func (*MsgUpdateVestingFunder) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgUpdateVestingFunder) GetFunderAddress() string {
	if x != nil {
		return x.FunderAddress
	}
	return ""
}

func (x *MsgUpdateVestingFunder) GetNewFunderAddress() string {
	if x != nil {
		return x.NewFunderAddress
	}
	return ""
}

func (x *MsgUpdateVestingFunder) GetVestingAddress() string {
	if x != nil {
		return x.VestingAddress
	}
	return ""
}

// MsgUpdateVestingFunderResponse defines the MsgUpdateVestingFunder response
// type.
type MsgUpdateVestingFunderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgUpdateVestingFunderResponse) Reset() {
	*x = MsgUpdateVestingFunderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateVestingFunderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateVestingFunderResponse) ProtoMessage() {}

func (x *MsgUpdateVestingFunderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUpdateVestingFunderResponse.ProtoReflect.Descriptor instead.
func (*MsgUpdateVestingFunderResponse) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{5}
}

// MsgConvertVestingAccount defines a message that enables converting a vesting account to a eth account
type MsgConvertVestingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vesting_address is the address of the vesting account to convert
	VestingAddress string `protobuf:"bytes,1,opt,name=vesting_address,json=vestingAddress,proto3" json:"vesting_address,omitempty"`
}

func (x *MsgConvertVestingAccount) Reset() {
	*x = MsgConvertVestingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgConvertVestingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgConvertVestingAccount) ProtoMessage() {}

func (x *MsgConvertVestingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgConvertVestingAccount.ProtoReflect.Descriptor instead.
func (*MsgConvertVestingAccount) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{6}
}

func (x *MsgConvertVestingAccount) GetVestingAddress() string {
	if x != nil {
		return x.VestingAddress
	}
	return ""
}

// MsgConvertVestingAccountResponse defines the MsgConvertVestingAccount response type.
type MsgConvertVestingAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgConvertVestingAccountResponse) Reset() {
	*x = MsgConvertVestingAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_vesting_v1_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgConvertVestingAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgConvertVestingAccountResponse) ProtoMessage() {}

func (x *MsgConvertVestingAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evmos_vesting_v1_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgConvertVestingAccountResponse.ProtoReflect.Descriptor instead.
func (*MsgConvertVestingAccountResponse) Descriptor() ([]byte, []int) {
	return file_evmos_vesting_v1_tx_proto_rawDescGZIP(), []int{7}
}

var File_evmos_vesting_v1_tx_proto protoreflect.FileDescriptor

var file_evmos_vesting_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x76, 0x6d,
	0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xed, 0x03, 0x0a, 0x1f, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x41, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x78, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x41, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x3a, 0x15, 0xe8, 0xa0, 0x1f, 0x00,
	0x82, 0xe7, 0xb0, 0x2a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x29, 0x0a, 0x27, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x0b, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a,
	0x13, 0x82, 0xe7, 0xb0, 0x2a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x61, 0x77, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x16,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x46, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x13, 0x82, 0xe7, 0xb0, 0x2a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x3a, 0x14, 0x82, 0xe7, 0xb0, 0x2a, 0x0f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaa, 0x05, 0x0a, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0xca, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x65, 0x76, 0x6d, 0x6f,
	0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x77, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x65, 0x76,
	0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x25, 0x2e, 0x65, 0x76, 0x6d,
	0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x65, 0x76, 0x6d, 0x6f,
	0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f,
	0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x2e, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x30, 0x2e, 0x65, 0x76, 0x6d,
	0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0xad, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x65, 0x76, 0x6d,
	0x6f, 0x73, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x05, 0x80, 0xe7, 0xb0, 0x2a, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x68, 0x65, 0x74, 0x75, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x2f, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_evmos_vesting_v1_tx_proto_rawDescOnce sync.Once
	file_evmos_vesting_v1_tx_proto_rawDescData = file_evmos_vesting_v1_tx_proto_rawDesc
)

func file_evmos_vesting_v1_tx_proto_rawDescGZIP() []byte {
	file_evmos_vesting_v1_tx_proto_rawDescOnce.Do(func() {
		file_evmos_vesting_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_evmos_vesting_v1_tx_proto_rawDescData)
	})
	return file_evmos_vesting_v1_tx_proto_rawDescData
}

var file_evmos_vesting_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_evmos_vesting_v1_tx_proto_goTypes = []interface{}{
	(*MsgCreateClawbackVestingAccount)(nil),         // 0: evmos.vesting.v1.MsgCreateClawbackVestingAccount
	(*MsgCreateClawbackVestingAccountResponse)(nil), // 1: evmos.vesting.v1.MsgCreateClawbackVestingAccountResponse
	(*MsgClawback)(nil),                             // 2: evmos.vesting.v1.MsgClawback
	(*MsgClawbackResponse)(nil),                     // 3: evmos.vesting.v1.MsgClawbackResponse
	(*MsgUpdateVestingFunder)(nil),                  // 4: evmos.vesting.v1.MsgUpdateVestingFunder
	(*MsgUpdateVestingFunderResponse)(nil),          // 5: evmos.vesting.v1.MsgUpdateVestingFunderResponse
	(*MsgConvertVestingAccount)(nil),                // 6: evmos.vesting.v1.MsgConvertVestingAccount
	(*MsgConvertVestingAccountResponse)(nil),        // 7: evmos.vesting.v1.MsgConvertVestingAccountResponse
	(*timestamppb.Timestamp)(nil),                   // 8: google.protobuf.Timestamp
	(*types.Period)(nil),                            // 9: cosmos.vesting.v1beta1.Period
}
var file_evmos_vesting_v1_tx_proto_depIdxs = []int32{
	8, // 0: evmos.vesting.v1.MsgCreateClawbackVestingAccount.start_time:type_name -> google.protobuf.Timestamp
	9, // 1: evmos.vesting.v1.MsgCreateClawbackVestingAccount.lockup_periods:type_name -> cosmos.vesting.v1beta1.Period
	9, // 2: evmos.vesting.v1.MsgCreateClawbackVestingAccount.vesting_periods:type_name -> cosmos.vesting.v1beta1.Period
	0, // 3: evmos.vesting.v1.Msg.CreateClawbackVestingAccount:input_type -> evmos.vesting.v1.MsgCreateClawbackVestingAccount
	2, // 4: evmos.vesting.v1.Msg.Clawback:input_type -> evmos.vesting.v1.MsgClawback
	4, // 5: evmos.vesting.v1.Msg.UpdateVestingFunder:input_type -> evmos.vesting.v1.MsgUpdateVestingFunder
	6, // 6: evmos.vesting.v1.Msg.ConvertVestingAccount:input_type -> evmos.vesting.v1.MsgConvertVestingAccount
	1, // 7: evmos.vesting.v1.Msg.CreateClawbackVestingAccount:output_type -> evmos.vesting.v1.MsgCreateClawbackVestingAccountResponse
	3, // 8: evmos.vesting.v1.Msg.Clawback:output_type -> evmos.vesting.v1.MsgClawbackResponse
	5, // 9: evmos.vesting.v1.Msg.UpdateVestingFunder:output_type -> evmos.vesting.v1.MsgUpdateVestingFunderResponse
	7, // 10: evmos.vesting.v1.Msg.ConvertVestingAccount:output_type -> evmos.vesting.v1.MsgConvertVestingAccountResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_evmos_vesting_v1_tx_proto_init() }
func file_evmos_vesting_v1_tx_proto_init() {
	if File_evmos_vesting_v1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evmos_vesting_v1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateClawbackVestingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreateClawbackVestingAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgClawback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgClawbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateVestingFunder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateVestingFunderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgConvertVestingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_vesting_v1_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgConvertVestingAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evmos_vesting_v1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evmos_vesting_v1_tx_proto_goTypes,
		DependencyIndexes: file_evmos_vesting_v1_tx_proto_depIdxs,
		MessageInfos:      file_evmos_vesting_v1_tx_proto_msgTypes,
	}.Build()
	File_evmos_vesting_v1_tx_proto = out.File
	file_evmos_vesting_v1_tx_proto_rawDesc = nil
	file_evmos_vesting_v1_tx_proto_goTypes = nil
	file_evmos_vesting_v1_tx_proto_depIdxs = nil
}
